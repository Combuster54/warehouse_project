controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 5.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1       # m
      yaw_goal_tolerance: 0.1       # rad
      trans_stopped_velocity: 0.1   # m/s
      rot_stopped_velocity: 0.1    # rad/s

    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.05
      min_vel_y: 0.0
      max_vel_x: 0.1
      max_vel_y: 0.0
      max_vel_theta: 0.25
      min_speed_xy: 0.0
      max_speed_xy: 1.5
      min_speed_theta: 0.0
      acc_lim_x: 0.05
      acc_lim_y: 0.05
      acc_lim_theta: 0.025
      decel_lim_x: -0.05
      decel_lim_y: -0.05
      decel_lim_theta: -0.025
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.1
      trans_stopped_velocity: 0.1
      short_circuit_trajectory_evaluation: True
      stateful: True
      #critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      critics: ["RotateToGoal", "Oscillation", "ObstacleFootprint", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]

    #lesser values will make robot slow but will make robot stay in path
    #greater values will make robot faster and unstable

      BaseObstacle.scale: 0.02
      PathAlign.scale: 30.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 30.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 30.0
      GoalDist.scale: 23.0
      RotateToGoal.scale: 30.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: robot_odom
      robot_base_frame: robot_base_footprint
      use_sim_time: True
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      robot_radius: 0.25
      # footprint: '[ [0.089, 0.069], [0.089, -0.069], [-0.089, -0.069], [-0.089, 0.069] ]'
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.25 #robot_dimension / 4
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0      
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True

#   Not included in course
local_costmap_client:
  ros__parameters:
    use_sim_time: True
local_costmap_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#   Not included in course
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False